// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// spec/definition.tmpl
// spec/path.tmpl
// spec/spec.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _specDefinitionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4f\x8f\x9b\x30\x10\xc5\xef\x7c\x8a\x11\xad\xb4\xed\x01\xb6\x67\xae\xad\xaa\xee\x81\x0a\x35\xed\x39\x9a\xc0\x23\x75\x65\x1b\xd7\x98\x36\x11\xe2\xbb\x57\x40\xfe\x38\x90\x90\x54\xeb\x0b\x96\x67\xfc\x9b\x37\xc3\x73\xdb\x46\x54\xa0\x14\x1a\x14\x0e\x5f\xe1\x44\xa5\xd7\xa5\x80\x2c\xd6\x6e\x6f\x10\x52\xd4\x75\x01\x0d\xab\x4f\x16\x25\xc5\x2f\x75\x66\x85\x12\x4e\xfc\x01\x9d\x82\x7d\x38\xce\x2c\x4a\xb1\x5b\x19\xce\xd1\x75\xfd\xf5\xa4\x3f\x5d\xfd\xe5\xed\x16\xf6\xfb\xde\xe0\x82\x05\x59\xe3\x00\xfc\x86\x12\x16\x3a\x5f\x04\xbe\xb5\x28\x13\x7a\x7a\xf3\x7c\x56\x5a\x3f\x4f\xf9\x4f\xd7\x0b\xa4\x6c\xee\x6b\xad\x36\xbf\x90\xbb\x9b\x49\x5c\x14\x43\x51\x96\x99\xad\x0c\xac\x13\xa8\x13\xbf\x9c\x2e\xae\xcc\x2a\x65\x73\x51\x38\x22\x07\x65\x24\xbb\xdb\x23\x8f\x5f\x1c\xd4\xca\x20\x9f\x0c\xff\xd8\x0f\x7e\x93\xdf\x34\x85\x6c\x2d\xef\xc3\x85\xfe\x84\x83\x3a\x69\x7d\xb5\x0c\x5d\xd0\xac\xd1\x2f\x5c\x7f\xae\xac\x62\xb7\x34\xe6\x72\xc8\x18\x4c\x31\x26\x4f\xb9\x33\x6c\x56\x09\xed\x60\x97\xa0\xbb\x48\x37\x52\xf2\x46\x22\x21\x67\x1b\xdc\x21\x7e\x6c\x6a\x57\xa9\x94\x6d\xfd\x93\xe5\x32\x57\x8d\x49\xff\x81\xfd\xa1\x1f\x02\x37\x7a\x19\xed\x4d\x39\x08\x82\xb6\x9d\x3f\xd1\xb0\x8f\x79\xef\x20\x19\xee\x58\xd6\x5b\x50\xfc\xe9\x7c\x3e\xea\x68\x5b\x8a\xd3\xaa\x80\xfc\xca\x0a\x5d\x37\x1a\xe1\xa0\x5c\x83\xde\x49\x68\x8a\xcf\xa6\x7e\x4f\x1f\x8e\xfa\xcd\xc4\xe9\x57\xff\xff\x58\xd6\x27\x78\xe1\xd8\xaf\xf9\xb8\xf7\xe6\x9e\x1b\xe6\x72\xd8\x78\xbb\xc5\xf5\x2f\x00\x00\xff\xff\x00\x83\x06\x6b\xe0\x04\x00\x00")

func specDefinitionTmplBytes() ([]byte, error) {
	return bindataRead(
		_specDefinitionTmpl,
		"spec/definition.tmpl",
	)
}

func specDefinitionTmpl() (*asset, error) {
	bytes, err := specDefinitionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/definition.tmpl", size: 1248, mode: os.FileMode(420), modTime: time.Unix(1611719528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specPathTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x8f\xda\x30\x10\xbd\xf3\x2b\xac\xb4\x12\xed\x21\x01\xf5\x98\x73\x55\x15\xa9\x54\x11\xf4\xbe\x1a\xec\x09\x78\x15\x7f\xec\xd8\xd9\x82\xa2\xfc\xf7\xca\x86\x94\x64\x49\x36\x95\xca\x05\x98\x4c\xe6\x3d\xbf\x79\xcf\x4d\x93\x32\x81\xa5\xd4\xc8\x12\x0b\xfe\xf4\x44\xe8\xea\xca\x3f\xf9\x8b\xc5\x84\xa5\x6d\xbb\x60\x7f\x3f\xa1\x57\x96\x2c\xdb\xb8\x82\xa4\x92\x5e\xbe\x22\x1b\x34\x84\x96\xac\x20\x2c\xe5\x79\x6f\x81\x63\xdb\x86\x31\x79\xa8\xee\x7f\xc3\xf1\x88\xf4\xeb\x62\xf1\x61\x26\x56\x0e\x6f\x83\x77\x58\x22\xa1\xe6\xb3\x83\x3f\x12\x96\x39\x5b\x7e\x58\x45\xf2\xd2\x4b\xa3\xdd\xea\x2d\xce\x72\x1a\x68\x0b\xf6\xdf\xb8\x9b\xc3\x33\x72\xff\x6e\x23\x08\x11\x09\x40\x55\x90\xb1\x48\x5e\xa2\xcb\xdf\x42\x6b\x31\xa1\xe5\x16\xec\x03\x91\x94\x79\x54\xb6\x02\x3f\xba\x95\x6c\xe3\x51\xed\x2d\xf2\x91\xfd\x74\x47\xc4\x17\xd6\xd7\x82\x25\x40\x04\x97\x64\xe6\xc8\xd2\xa3\x1a\x50\xff\x5f\x36\x5a\xb0\xd1\x63\x7f\x07\xf7\xcd\x90\x02\x3f\xb7\x84\x32\x76\x45\x0b\x5d\x5f\x18\xc3\x18\x85\x28\x8c\xd4\x1e\x69\x0e\xe0\x9c\xea\xba\xaa\xe0\x50\x61\xce\x3c\xd5\x38\x3a\xbd\x77\x96\x45\xd3\x0c\x02\x93\x84\x62\xf8\xe1\xf2\xd8\x46\xa0\x8f\xc8\xb2\x22\x54\x22\xf4\xea\xd9\x19\x4d\x96\x07\x77\xee\x2c\x0f\x0f\xda\xf6\xaa\xb1\x35\xce\x77\x6a\x73\xa3\x5d\xad\xfa\xc6\x49\x19\x58\x5b\x49\x0e\xc1\x5b\x71\xca\xed\x51\xf0\x58\x2c\x6e\x44\x14\x66\x67\xf9\x1e\xe9\x55\x72\xdc\xa2\x3f\x99\xbb\x1c\x37\x29\x34\xb2\xec\x2b\x3a\x4e\xd2\x86\xb7\x58\x92\xdc\x45\x11\xf7\x7a\xce\x92\xa6\xe9\x37\xb6\x6d\xb2\x98\xd8\xa5\x05\x02\x85\x1e\x69\xc0\x57\xea\x9c\x1d\x8c\xb8\xf4\x34\xd4\xa0\x30\x67\x45\x68\xff\x21\x5d\x3f\x47\x84\x2f\xb5\x24\x14\xa3\xb2\x5f\x59\x7f\xaa\x50\x07\x29\x09\xa2\xc1\xb2\x7b\xbc\x3e\xb3\xf5\x70\xb1\x8e\x9f\x50\xc1\xd0\xba\x53\x77\xc4\x7d\xe0\xd6\x08\xac\x7e\x82\x9a\xba\x2b\xe6\x31\x26\x2f\x89\x73\x8a\xca\xfa\x4b\x1a\x95\x72\xef\x78\xab\x53\xc3\x59\xa3\x5d\x7f\xff\xcb\x2f\xeb\xf5\xb2\x8f\x36\xd8\x95\xab\x39\x47\xe7\xc6\xb3\xb5\x43\x37\x4f\x7d\x36\xd8\xbb\xf8\x2f\xac\xed\x31\xc4\x5d\x1a\x6e\x2a\xc0\x71\x60\x84\x70\x11\x5f\x1d\x79\x15\xb7\x73\x0d\x19\x51\xf3\x19\x8f\x2f\x9a\xa6\x0b\x5d\xfc\xfe\x13\x00\x00\xff\xff\x2e\xf9\x7c\x49\xa2\x06\x00\x00")

func specPathTmplBytes() ([]byte, error) {
	return bindataRead(
		_specPathTmpl,
		"spec/path.tmpl",
	)
}

func specPathTmpl() (*asset, error) {
	bytes, err := specPathTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/path.tmpl", size: 1698, mode: os.FileMode(420), modTime: time.Unix(1611883134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specSpecTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\xbd\x4a\x44\x31\x10\x85\xfb\x3c\xc5\x61\x9b\xad\x8c\xab\x76\xe9\x44\x2c\xd6\x42\x44\x9f\x60\xc8\xce\x5d\x23\x37\x3f\xcc\xcc\x5d\x8b\xcb\x7d\x77\x49\x04\x41\xc1\x54\x87\xf3\x9d\x7c\xa3\x9f\x74\x3e\xb3\x04\xec\x6f\xfd\x61\xef\x52\x99\x6a\x70\x80\x25\x9b\x39\xe0\x49\x6b\xc1\x6b\x8b\x38\x96\x49\x48\x4d\x96\x68\x8b\x30\xee\x5f\x8e\x0e\x38\xb1\x46\x49\xcd\x52\x2d\x01\xd2\x22\x94\xe5\xc2\x82\x75\xf5\x6f\x23\x3d\x53\xe6\x6d\x73\x40\xac\xc5\x28\x5a\x37\x03\x85\x32\x87\x3e\x7a\xf8\x6e\xc7\x02\xe0\x4c\x69\x1e\xfd\x63\x4f\xa3\xbd\xb0\xe8\xb0\xdf\xf8\x3b\x7f\x70\xb1\x16\x5d\x32\x6b\xf7\x5c\x81\x5a\x9b\x53\xa4\x7e\xfe\xfa\x43\x6b\x71\x4d\xea\x69\x89\xff\x62\xb7\xae\x30\xce\x6d\x26\x63\xec\x1a\xd9\xfb\x0e\x1e\xdb\xe6\xfe\x90\x13\x4f\xa9\xa4\xfe\xef\x87\xff\x7a\x5f\x01\x00\x00\xff\xff\xa2\x02\x29\xc9\x33\x01\x00\x00")

func specSpecTmplBytes() ([]byte, error) {
	return bindataRead(
		_specSpecTmpl,
		"spec/spec.tmpl",
	)
}

func specSpecTmpl() (*asset, error) {
	bytes, err := specSpecTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/spec.tmpl", size: 307, mode: os.FileMode(420), modTime: time.Unix(1611719528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"spec/definition.tmpl": specDefinitionTmpl,
	"spec/path.tmpl":       specPathTmpl,
	"spec/spec.tmpl":       specSpecTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"spec": &bintree{nil, map[string]*bintree{
		"definition.tmpl": &bintree{specDefinitionTmpl, map[string]*bintree{}},
		"path.tmpl":       &bintree{specPathTmpl, map[string]*bintree{}},
		"spec.tmpl":       &bintree{specSpecTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
