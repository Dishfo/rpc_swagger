// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// spec/definition.tmpl
// spec/path.tmpl
// spec/spec.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _specDefinitionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xc1\x6e\xab\x30\x10\xbc\xf3\x15\x2b\xde\x93\x72\x82\xdc\x39\x57\x55\x73\x48\x85\x9a\xde\xa3\x0d\x8c\x23\x57\xc6\xb8\xc6\x69\x13\x21\xfe\xbd\xc2\xa4\x89\x13\x12\x5a\xa9\x5c\xb0\xbc\xbb\x33\x3b\xe3\x69\xdb\x84\x4a\x08\xa9\x41\xb1\xff\x4b\x27\x6b\xbd\x16\x12\xaa\x5c\xbb\x83\x41\x4c\x49\xd7\x45\xe4\xbf\xbe\x59\x0a\x4a\x17\x4d\x6e\x65\x25\x9d\xfc\x00\x9d\x8a\x7d\x39\xcd\x2d\x84\xdc\xaf\x0c\x17\xe8\xba\x7e\x3c\xeb\x6f\x57\x9f\xbc\xdd\xc2\xbe\x1e\x0c\x2e\xb0\xa0\x1a\x1c\x01\x5f\x20\x60\xa1\x8b\x49\xc0\xff\x16\x22\xa3\xd9\xbf\xf9\x79\xd3\x66\x7e\x8d\x3f\xbb\x4d\xb0\x64\xf3\xf3\xae\xf5\xe6\x0d\x85\xbb\xdb\xc4\x65\xe9\x49\x59\xe5\xb6\x36\xb0\x4e\xa2\xc9\x42\x3a\x5d\xde\xf0\x6a\xc9\xe6\x82\x38\x21\x87\xca\x28\x76\xf7\x2d\x4f\x17\x0e\xd5\xca\xa0\xb8\x32\xff\x5b\x0f\xde\x29\x14\x4d\x31\x5b\xcb\x87\x38\xa0\x91\x0e\xd5\x69\xb7\x3f\xd3\xea\x92\x46\xc2\x9e\xb8\x79\xac\x6d\xc5\x6e\xca\x56\xe1\x3b\x7c\x08\x86\xe6\x6b\xdc\x11\x6c\x5e\x4b\xed\x60\xa7\x40\xf7\x89\xde\x29\xc5\x1b\x85\x8c\x9c\xdd\x61\x84\x18\xec\x1c\x45\x51\xdb\x8e\x03\x1e\xf7\xb5\x20\x45\x99\x9f\xb1\xac\xb7\xa0\xf4\xe1\x7c\x3f\xac\xd1\xb6\x94\x2e\xeb\x12\xea\x99\x2b\x74\xdd\x60\xab\xb9\x19\x81\x01\x82\xd2\x73\x40\x02\x85\x69\x38\xff\xfb\x57\x19\xbf\x86\xd7\x78\x3c\x04\xa7\xc9\xef\x2b\x00\x00\xff\xff\x73\x7f\x88\x19\xea\x03\x00\x00")

func specDefinitionTmplBytes() ([]byte, error) {
	return bindataRead(
		_specDefinitionTmpl,
		"spec/definition.tmpl",
	)
}

func specDefinitionTmpl() (*asset, error) {
	bytes, err := specDefinitionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/definition.tmpl", size: 1002, mode: os.FileMode(436), modTime: time.Unix(1611578756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specPathTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x8f\xda\x30\x10\xbd\xef\xaf\xb0\xd2\x4a\x9c\x08\xab\x1e\xf3\x03\xaa\x22\x95\x2a\x82\xde\xd1\x60\xbf\x80\x57\x89\xed\x1d\x3b\xdb\x45\x51\xfe\x7b\x65\x03\xdd\x84\x8f\xa6\x87\x72\x01\x26\x93\xf7\xde\xbc\x79\x76\xd7\xcd\x85\x42\xa5\x0d\x44\xe6\x28\x1c\xb6\x0c\xdf\xd6\x61\x1b\x8e\x0e\x99\x98\xf7\xfd\x93\xf8\xf3\x89\xbd\xba\x12\xf9\xd2\x97\xac\x1b\x1d\xf4\x1b\xc4\xa8\x21\xb6\xe4\x25\xa3\xd2\xef\x1b\x47\x12\x7d\x1f\x61\x8a\x58\xdd\xfc\xa2\xfd\x1e\xfc\xf3\xe8\x70\x83\x89\xda\xe3\x0c\xbc\x46\x05\x86\x91\x93\xc0\x9f\x19\x55\x21\x66\x9f\x16\x49\xbc\x0e\xda\x1a\xbf\xb8\xe6\x99\x3d\x26\x5a\x91\xfb\x37\xed\x76\xf7\x02\x19\xfe\xda\x48\x4a\x25\x01\x54\x97\x6c\x1d\x38\x68\xf8\xe2\x9a\xda\xa8\x07\x5e\xae\xc8\xdd\x08\x99\x8b\x80\xc6\xd5\x14\x20\xb2\x8f\x01\xb7\x95\x46\xad\xce\xab\xc9\x97\x01\xcd\xc6\x41\xde\x59\xd2\x65\x4e\xbc\x8a\xa1\x21\x22\x23\x66\x3a\x66\x57\x74\x3a\xa0\x19\xe9\xfd\x2f\x12\x8c\x12\x77\x07\xfe\x46\xfe\xab\xe5\x86\xc2\x94\xfd\x55\xea\x4a\xe1\x39\xbd\x70\x8f\xe3\x2e\x45\x69\xb5\x09\xe0\x29\x82\xf7\xb9\x69\xeb\x9a\x76\x35\x0a\x11\xb8\xc5\x5d\xf4\xc1\x2c\x4f\x5d\x37\x3a\x2a\x59\x2c\xc6\x1f\xbe\x48\x6d\x4c\x66\x0f\x91\x97\xb1\x92\xa8\x17\xec\x64\xcc\xe4\xda\xc9\x58\xec\xfb\x93\xc9\xce\xfa\x70\xb1\x5b\x5a\xe3\xdb\x66\x18\x97\xb9\x20\xe7\x6a\x2d\x29\xda\xbd\x78\xf1\xd6\x9c\x1f\xc5\x64\xa5\xe2\x52\x25\x53\xd6\x4e\x6e\xc0\x6f\x5a\x62\x85\x70\xb0\x1f\x56\x38\x62\x6a\x10\xc0\x23\x54\x6d\x0a\xb1\xb3\xea\x38\x98\xd2\x50\x83\x42\x94\xb1\xfd\xbb\xf6\xc3\x8c\x33\x5e\x5b\xcd\x50\x37\xc6\x78\x79\x40\x43\xe3\xb0\x3c\x3a\x8a\x09\x38\xc6\x23\x5f\x59\x85\xfa\x07\x35\x83\x23\xc9\xf0\xce\x1a\x3f\x9c\x7c\xf6\xe5\xf9\x79\x36\x84\x56\xf0\x92\xb5\x8b\x80\x85\xf0\xad\x94\xf0\x7e\x42\xcb\x38\xb7\xb7\x17\x5a\xbe\x4e\xff\xe2\xb8\x69\xa5\xa7\xb7\x02\xed\x47\x5e\xc5\x7b\xe4\x64\xed\x49\xf4\xc5\x58\xb6\xaa\x95\x13\xcb\x7a\xea\xba\x4b\x72\xd2\xf7\xef\x00\x00\x00\xff\xff\x98\xa9\x95\x86\x61\x05\x00\x00")

func specPathTmplBytes() ([]byte, error) {
	return bindataRead(
		_specPathTmpl,
		"spec/path.tmpl",
	)
}

func specPathTmpl() (*asset, error) {
	bytes, err := specPathTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/path.tmpl", size: 1377, mode: os.FileMode(436), modTime: time.Unix(1611578833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specSpecTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x3d\x4a\x04\x41\x10\x85\xf3\x3e\xc5\x63\x93\x8d\x6c\x57\xcd\x26\x52\xd8\x64\x12\x11\xd4\x03\x14\x3d\x35\x6b\x4b\xff\x51\x5d\x3d\x06\xc3\xdc\x5d\x7a\x10\x41\x61\x2b\x2a\xea\xa3\xbe\xf7\xea\x17\x5d\x2e\x2c\x03\x8e\xf7\xf6\x74\x34\x3e\xcd\x79\x30\x80\x7a\x0d\x3c\xe0\x7d\x3c\x63\x4c\xb3\x50\x55\x69\x4e\x9b\x30\x9e\x5e\x46\x03\x4c\x5c\x9d\xf8\xa2\x3e\xa7\x01\x52\x1c\x2a\xcb\xc2\x82\x75\xb5\xaf\xfb\xf6\x4c\x91\xb7\xcd\x00\x2e\x27\x25\xa7\x5d\x0a\x24\x8a\x3f\xd6\x33\x2f\x1c\x72\x61\xc1\x1b\x53\xdc\x21\x47\xf2\x61\xc0\xc4\xcb\x63\xf3\x93\x75\xb9\x9f\x17\x96\xba\x87\xdc\xd9\x07\x7b\x32\x2e\xa7\xda\x22\xd7\xae\xbb\x01\x95\x12\xbc\xa3\xde\xe2\xf6\xb3\xe6\x64\x8a\xe4\xa9\xb9\xab\xd8\xac\x2b\x94\x63\x09\xa4\x8c\x43\x21\xfd\x38\xc0\x62\xdb\xcc\x3f\x32\xf1\xec\x93\xef\x7f\xbf\xfc\xcf\x7c\x07\x00\x00\xff\xff\x17\xbd\xf0\x1b\x35\x01\x00\x00")

func specSpecTmplBytes() ([]byte, error) {
	return bindataRead(
		_specSpecTmpl,
		"spec/spec.tmpl",
	)
}

func specSpecTmpl() (*asset, error) {
	bytes, err := specSpecTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/spec.tmpl", size: 309, mode: os.FileMode(436), modTime: time.Unix(1611500399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"spec/definition.tmpl": specDefinitionTmpl,
	"spec/path.tmpl":       specPathTmpl,
	"spec/spec.tmpl":       specSpecTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"spec": &bintree{nil, map[string]*bintree{
		"definition.tmpl": &bintree{specDefinitionTmpl, map[string]*bintree{}},
		"path.tmpl":       &bintree{specPathTmpl, map[string]*bintree{}},
		"spec.tmpl":       &bintree{specSpecTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
