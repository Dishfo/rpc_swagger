// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// spec/definition.tmpl
// spec/path.tmpl
// spec/spec.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _specDefinitionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xc1\x6e\xab\x30\x10\xbc\xf3\x15\x2b\xde\x93\x72\x82\xdc\x39\x57\x55\x73\x48\x85\x9a\xde\xa3\x0d\x8c\x23\x57\xc6\xb8\xc6\x69\x13\x21\xfe\xbd\xc2\xa4\x89\x13\x12\x5a\xa9\x5c\xb0\xbc\xbb\xb3\x33\xe3\x69\xdb\x84\x4a\x08\xa9\x41\xb1\xff\x4b\x27\x6b\xbd\x16\x12\xaa\x5c\xbb\x83\x41\x4c\x49\xd7\x45\xe4\xbf\xbe\x59\x0a\x4a\x17\x4d\x6e\x65\x25\x9d\xfc\x00\x9d\x8a\x7d\x39\xcd\x2d\x84\xdc\xaf\x0c\x17\xe8\xba\x7e\x3c\xeb\x6f\x57\x9f\xbc\xdd\xc2\xbe\x1e\x0c\x2e\xb0\xa0\x1a\x1c\x01\x5f\x20\x60\xa1\x8b\x49\xc0\xff\x16\x22\xa3\xd9\xbf\xf9\x99\x69\x33\xbf\xc6\x9f\xdd\x5e\xb0\x64\xf3\x33\xd7\x7a\xf3\x86\xc2\xdd\x6d\xe2\xb2\xf4\x4b\x59\xe5\xb6\x36\xb0\x4e\xa2\xc9\xc2\x75\xba\xbc\xe1\xd5\x92\xcd\xc5\xe2\x84\x1c\x2a\xa3\xd8\xdd\xb7\x3c\x5d\x38\x54\x2b\x83\xe2\xca\xfc\x6f\x3d\x78\xa7\x50\x34\xc5\x6c\x2d\x1f\xe2\x09\x7d\xd2\xa1\x3a\x71\xfd\x33\x0d\x5d\xd2\x48\xe8\x13\x37\x8f\xb5\xad\xd8\x4d\xd9\x2c\x7c\x87\x0f\xc5\xd0\x7c\x8d\x3b\x82\xcd\x6b\xa9\x1d\xec\x14\xe8\x3e\xd1\x3b\xa5\x78\xa3\x90\x91\xb3\x3b\x8c\x10\x03\xce\x51\x14\xb5\xed\x38\xf0\x71\x5f\x0b\x52\x95\xf9\x19\xcb\x7a\x0b\x4a\x1f\xce\xf7\x03\x8d\xb6\xa5\x74\x59\x97\x50\xcf\x5c\xa1\xeb\x06\x5b\xcd\xcd\x48\x0c\x10\x94\x9e\x03\x13\x28\x4c\xc3\xf9\xdf\xbf\xca\xf8\x35\xbc\xc6\xe3\x21\x38\x4d\x7e\x5f\x01\x00\x00\xff\xff\x21\xb3\x5f\x4a\xfa\x03\x00\x00")

func specDefinitionTmplBytes() ([]byte, error) {
	return bindataRead(
		_specDefinitionTmpl,
		"spec/definition.tmpl",
	)
}

func specDefinitionTmpl() (*asset, error) {
	bytes, err := specDefinitionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/definition.tmpl", size: 1018, mode: os.FileMode(436), modTime: time.Unix(1611583890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specPathTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcd\x8e\xda\x30\x10\xbe\xef\x53\x58\x69\x25\x4e\xc0\xaa\xc7\x3c\x40\xd5\x95\x4a\x15\x41\xef\x68\xb0\xbf\x80\x57\x8e\xed\x1d\x3b\xdb\x45\x51\xde\xbd\xb2\x81\x6e\xb2\x84\xd2\x43\xb9\x10\x4d\x26\xdf\xcc\xf7\x63\x77\xdd\x5c\x28\xd4\xda\x42\x14\x9e\xe2\x61\xcb\x08\xad\x89\xdb\x78\xf4\x28\xc4\xbc\xef\x1f\xc4\x9f\x5f\xea\xd5\xb5\x58\x3c\x85\x8a\x75\xa3\xa3\x7e\x85\x18\x35\xa4\x96\x45\xc5\xa8\xf5\xdb\xc6\x93\x44\xdf\x27\x98\x32\x55\x37\xbf\x68\xbf\x07\xff\x3c\x7a\x5c\x61\xc2\x04\x9c\x81\xd7\xa8\xc1\xb0\xf2\x2e\xf0\x67\x46\x5d\x8a\xd9\xa7\x65\x5e\x5e\x47\xed\x6c\x58\x7e\x9c\x33\xbb\x3d\x68\x45\xfe\xdf\x76\x77\xbb\x67\xc8\xf8\xd7\x46\x52\x2a\x2f\x40\xa6\x62\xe7\xc1\x51\x23\x94\x1f\x47\x5b\x75\x43\xcb\x15\xf9\xab\x45\xe6\x22\xa2\xf1\x86\x22\x44\xf1\x4e\x70\x5b\x6b\x18\x75\xb6\x66\xf1\x14\xd1\x6c\x3c\xe4\x84\x49\x17\x9e\x78\x11\x43\x41\x44\x41\xcc\x74\x2c\xee\xf0\xd6\x11\xcd\x68\xff\xff\xb2\x92\x55\x62\x52\x80\x6f\x14\xbe\x3a\x6e\x28\xde\xb3\xa3\xce\x5d\x39\x4c\xa7\x0f\xa6\x66\x4c\x8e\xa8\x9c\xb6\x11\x7c\x6f\xc0\xdb\xdc\xb6\xc6\xd0\xce\xa0\x14\x91\x5b\x4c\xa2\x0f\xb8\x3c\x74\xdd\xe8\xe8\x14\xa9\x98\x1e\x42\x99\xdb\x98\xec\x1e\x62\x51\xa5\x4a\x1e\xbd\x64\x2f\x53\x46\xd7\x5e\xa6\x62\xdf\x9f\x44\xf6\x2e\xc4\x8b\xdc\xd2\xd9\xd0\x36\xc3\xf8\xcc\x05\x79\x6f\xb4\xa4\x24\xf7\xf2\x39\x38\x7b\x7e\x95\x92\x96\x8b\x4f\x2a\x8b\xb2\xf6\x72\x03\x7e\xd5\x12\x2b\xc4\x83\x7b\x97\xc2\x13\x53\x83\x08\x1e\xa1\x6a\x5b\x8a\x9d\x53\xc7\x01\x4b\x4b\x0d\x4a\x51\xa5\xf6\xef\x3a\x0c\x33\xcf\x78\x69\x35\x43\x5d\x09\x13\xe4\x01\x0d\x8d\xc3\x72\xeb\x68\x66\xe0\x14\x8f\xc5\xca\x29\x98\x1f\xd4\x0c\x8e\x28\x23\x78\x67\xc3\x90\xf9\xec\xcb\xe3\xe3\x6c\x08\xad\x10\x24\x6b\x9f\x00\x4b\x11\x5a\x29\x11\xc2\xb5\xdd\x29\xf4\xeb\x7c\x89\x25\x12\xc2\x6a\x33\x36\x7e\x6a\xe5\x71\xbc\xaf\xef\xc1\x21\xe0\xad\x68\x9f\xab\x91\xf6\x23\x9d\xd3\x9d\x74\xb2\xe5\x44\xf8\x62\x0a\x3b\xd5\xca\x3b\x46\x3f\x74\xdd\x25\x75\xf9\xff\x77\x00\x00\x00\xff\xff\x06\xb5\x71\x9e\xad\x05\x00\x00")

func specPathTmplBytes() ([]byte, error) {
	return bindataRead(
		_specPathTmpl,
		"spec/path.tmpl",
	)
}

func specPathTmpl() (*asset, error) {
	bytes, err := specPathTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/path.tmpl", size: 1453, mode: os.FileMode(436), modTime: time.Unix(1611583881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specSpecTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x3d\x4a\x04\x41\x10\x85\xf3\x3e\xc5\x63\x93\x8d\x6c\x57\xcd\x26\x52\xd8\x64\x12\x11\xd4\x03\x14\x3d\x35\x6b\x4b\xff\x51\x5d\x3d\x06\xc3\xdc\x5d\x7a\x10\x41\x61\x2b\x2a\xea\xa3\xbe\xf7\xea\x17\x5d\x2e\x2c\x03\x8e\xf7\xf6\x74\x34\x3e\xcd\x79\x30\x80\x7a\x0d\x3c\xe0\x7d\x3c\x63\x4c\xb3\x50\x55\x69\x4e\x9b\x30\x9e\x5e\x46\x03\x4c\x5c\x9d\xf8\xa2\x3e\xa7\x01\x52\x1c\x2a\xcb\xc2\x82\x75\xb5\xaf\xfb\xf6\x4c\x91\xb7\xcd\x00\x2e\x27\x25\xa7\x5d\x0a\x24\x8a\x3f\xd6\x33\x2f\x1c\x72\x61\xc1\x1b\x53\xdc\x21\x47\xf2\x61\xc0\xc4\xcb\x63\xf3\x93\x75\xb9\x9f\x17\x96\xba\x87\xdc\xd9\x07\x7b\x32\x2e\xa7\xda\x22\xd7\xae\xbb\x01\x95\x12\xbc\xa3\xde\xe2\xf6\xb3\xe6\x64\x8a\xe4\xa9\xb9\xab\xd8\xac\x2b\x94\x63\x09\xa4\x8c\x43\x21\xfd\x38\xc0\x62\xdb\xcc\x3f\x32\xf1\xec\x93\xef\x7f\xbf\xfc\xcf\x7c\x07\x00\x00\xff\xff\x17\xbd\xf0\x1b\x35\x01\x00\x00")

func specSpecTmplBytes() ([]byte, error) {
	return bindataRead(
		_specSpecTmpl,
		"spec/spec.tmpl",
	)
}

func specSpecTmpl() (*asset, error) {
	bytes, err := specSpecTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/spec.tmpl", size: 309, mode: os.FileMode(436), modTime: time.Unix(1611500399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"spec/definition.tmpl": specDefinitionTmpl,
	"spec/path.tmpl":       specPathTmpl,
	"spec/spec.tmpl":       specSpecTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"spec": &bintree{nil, map[string]*bintree{
		"definition.tmpl": &bintree{specDefinitionTmpl, map[string]*bintree{}},
		"path.tmpl":       &bintree{specPathTmpl, map[string]*bintree{}},
		"spec.tmpl":       &bintree{specSpecTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
