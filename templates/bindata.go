// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// spec/definition.tmpl
// spec/path.tmpl
// spec/spec.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _specDefinitionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4f\x8f\x9b\x30\x10\xc5\xef\x7c\x8a\x11\xad\xb4\xed\x01\xb6\x67\xae\xad\xaa\xee\x81\x0a\x35\xed\x39\x9a\xc0\x23\x75\x65\x1b\xd7\x98\x36\x11\xe2\xbb\x57\x40\xfe\x38\x90\x90\x54\xeb\x0b\x96\x67\xfc\x9b\x37\xc3\x73\xdb\x46\x54\xa0\x14\x1a\x14\x0e\x5f\xe1\x44\xa5\xd7\xa5\x80\x2c\xd6\x6e\x6f\x10\x52\xd4\x75\x01\x0d\xab\x4f\x16\x25\xc5\x2f\x75\x66\x85\x12\x4e\xfc\x01\x9d\x82\x7d\x38\xce\x2c\x4a\xb1\x5b\x19\xce\xd1\x75\xfd\xf5\xa4\x3f\x5d\xfd\xe5\xed\x16\xf6\xfb\xde\xe0\x82\x05\x59\xe3\x00\xfc\x86\x12\x16\x3a\x5f\x04\xbe\xb5\x28\x13\x7a\x7a\xf3\x7c\x56\x5a\x3f\x4f\xf9\x4f\xd7\x0b\xa4\x6c\xee\x6b\xad\x36\xbf\x90\xbb\x9b\x49\x5c\x14\x43\x51\x96\x99\xad\x0c\xac\x13\xa8\x13\xbf\x9c\x2e\xae\xcc\x2a\x65\x73\x51\x38\x22\x07\x65\x24\xbb\xdb\x23\x8f\x5f\x1c\xd4\xca\x20\x9f\x0c\xff\xd8\x0f\x7e\x93\xdf\x34\x85\x6c\x2d\xef\xc3\x85\xfe\x84\x83\x3a\x69\x7d\xb5\x0c\x5d\xd0\xac\xd1\x2f\x5c\x7f\xae\xac\x62\xb7\x34\xe6\x72\xc8\x18\x4c\x31\x26\x4f\xb9\x33\x6c\x56\x09\xed\x60\x97\xa0\xbb\x48\x37\x52\xf2\x46\x22\x21\x67\x1b\xdc\x21\x7e\x6c\x6a\x57\xa9\x94\x6d\xfd\x93\xe5\x32\x57\x8d\x49\xff\x81\xfd\xa1\x1f\x02\x37\x7a\x19\xed\x4d\x39\x08\x82\xb6\x9d\x3f\xd1\xb0\x8f\x79\xef\x20\x19\xee\x58\xd6\x5b\x50\xfc\xe9\x7c\x3e\xea\x68\x5b\x8a\xd3\xaa\x80\xfc\xca\x0a\x5d\x37\x1a\xe1\xa0\x5c\x83\xde\x49\x68\x8a\xcf\xa6\x7e\x4f\x1f\x8e\xfa\xcd\xc4\xe9\x57\xff\xff\x58\xd6\x27\x78\xe1\xd8\xaf\xf9\xb8\xf7\xe6\x9e\x1b\xe6\x72\xd8\x78\xbb\xc5\xf5\x2f\x00\x00\xff\xff\x00\x83\x06\x6b\xe0\x04\x00\x00")

func specDefinitionTmplBytes() ([]byte, error) {
	return bindataRead(
		_specDefinitionTmpl,
		"spec/definition.tmpl",
	)
}

func specDefinitionTmpl() (*asset, error) {
	bytes, err := specDefinitionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/definition.tmpl", size: 1248, mode: os.FileMode(420), modTime: time.Unix(1611719528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specPathTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x51\x8f\xda\x3c\x10\x7c\xbf\x5f\x61\xf1\x7d\x12\xed\x43\x00\xf5\x31\x3f\xa0\x2a\x52\xa9\x22\xe8\xfb\x69\x71\x26\xe0\x53\x62\xfb\xd6\xce\x15\x14\xe5\xbf\x57\x36\xa4\x24\x47\xb8\x54\x2a\x2f\xc0\x66\x99\xd9\x9d\x9d\xa1\x69\x12\x91\xa3\x50\x1a\x62\x66\xc9\x1f\x9f\x19\xae\x2e\xfd\xb3\x3f\x5b\xcc\x44\xd2\xb6\x4f\xe2\xcf\x2b\xf4\xaa\x42\x2c\xd6\x2e\x63\x55\x29\xaf\xde\x20\x06\x0d\xa1\x65\x91\x31\x0a\x75\xda\x59\x92\x68\xdb\x00\x93\x86\xea\xee\x17\x1d\x0e\xe0\x9f\x67\x8b\x3b\x4c\x94\x0e\x57\xe0\x2d\x0a\x30\xb4\x9c\x04\xfe\x9f\x51\xa4\x62\xfe\xdf\x32\x0e\xaf\xbc\x32\xda\x2d\xdf\xf3\xcc\x1f\x13\x6d\xc8\xfe\xdd\xec\x66\xff\x02\xe9\x3f\x6c\xa4\x3c\x8f\x03\x50\x99\xb1\xb1\x60\xaf\xe0\xd2\xf7\xd4\x3a\x7f\xa0\xe5\x86\xec\xdd\x20\x89\xf0\xa8\x6c\x49\x7e\xf4\x2a\x8b\xb5\x47\xb5\xb3\x90\x23\xf7\xe9\x56\xc4\xab\xe8\x6b\x21\x66\xc4\x4c\xe7\xd9\xc4\xca\xca\xa3\x1a\x8c\xfe\xaf\xd3\xe8\x5c\x8c\xae\xfd\x8d\xdc\x57\xc3\x15\xf9\xa9\x23\x14\xb1\x2b\x5a\xe8\xf2\x83\x31\x8e\x51\x8a\xcc\x28\xed\xc1\x53\x04\xa7\x44\xd7\x65\x49\xfb\x12\xa9\xf0\x5c\x63\x14\xbd\xb7\xcb\x53\xd3\x0c\x02\x33\x0b\xc5\xf0\xc1\xa5\xb1\x8d\x49\x1f\x20\x16\x59\xa8\x44\xea\xe5\x8b\x33\x9a\xad\x0c\xee\xdc\x5a\x19\x1e\xb4\xed\x45\x63\x6b\x9c\xef\xd4\x96\x46\xbb\xba\xea\x1b\x27\x11\x64\x6d\xa9\x24\x05\x6f\x45\x94\xeb\xa3\xe0\xb1\x58\x5c\xe7\x51\x98\xad\x95\x3b\xf0\x9b\x92\xd8\xc0\x1f\xcd\x4d\x0e\x4b\x4c\x15\x3c\x78\x80\xaa\x74\x2a\xf6\x26\x3f\xf7\x36\xd5\x54\x21\x15\x59\x68\xff\xae\x5c\xdf\xed\x8c\xd7\x5a\x31\xf2\x51\x71\x54\x21\x34\xc4\xa7\x12\x3a\x2c\xcc\x14\x6d\xb0\xb8\x85\xe0\xb3\x58\x0d\xe5\x77\xf2\x88\x8a\x86\x06\x7b\x94\xe4\x1b\xe0\xc6\xe4\x28\x7f\x50\xf5\x28\xd1\xd3\x1c\x0f\xa3\x7c\x4a\x50\x59\x7f\x4e\xa2\x52\xee\x03\x07\x74\x6a\x38\x6b\xb4\xeb\x5f\x69\xfe\x65\xb5\x9a\xf7\xd9\x72\x38\xc9\xca\x86\x3d\x52\xe1\x6a\x29\xe1\xdc\x78\x02\xb6\x70\xd3\xa3\x4f\xc6\x6f\x1b\xbf\x85\xb3\xdd\x47\xad\xf3\xec\x55\x05\x3a\x0c\x8c\x10\xfe\x2e\x2f\xbe\xb9\x88\xdb\xb9\x86\x4d\x5e\xcb\x09\x27\x3e\x35\x4d\x17\x8d\xf8\xfe\x3b\x00\x00\xff\xff\x7b\xa8\x12\x01\x48\x06\x00\x00")

func specPathTmplBytes() ([]byte, error) {
	return bindataRead(
		_specPathTmpl,
		"spec/path.tmpl",
	)
}

func specPathTmpl() (*asset, error) {
	bytes, err := specPathTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/path.tmpl", size: 1608, mode: os.FileMode(420), modTime: time.Unix(1611824865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specSpecTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\xbd\x4a\x44\x31\x10\x85\xfb\x3c\xc5\x61\x9b\xad\x8c\xab\x76\xe9\x44\x2c\xd6\x42\x44\x9f\x60\xc8\xce\x5d\x23\x37\x3f\xcc\xcc\x5d\x8b\xcb\x7d\x77\x49\x04\x41\xc1\x54\x87\xf3\x9d\x7c\xa3\x9f\x74\x3e\xb3\x04\xec\x6f\xfd\x61\xef\x52\x99\x6a\x70\x80\x25\x9b\x39\xe0\x49\x6b\xc1\x6b\x8b\x38\x96\x49\x48\x4d\x96\x68\x8b\x30\xee\x5f\x8e\x0e\x38\xb1\x46\x49\xcd\x52\x2d\x01\xd2\x22\x94\xe5\xc2\x82\x75\xf5\x6f\x23\x3d\x53\xe6\x6d\x73\x40\xac\xc5\x28\x5a\x37\x03\x85\x32\x87\x3e\x7a\xf8\x6e\xc7\x02\xe0\x4c\x69\x1e\xfd\x63\x4f\xa3\xbd\xb0\xe8\xb0\xdf\xf8\x3b\x7f\x70\xb1\x16\x5d\x32\x6b\xf7\x5c\x81\x5a\x9b\x53\xa4\x7e\xfe\xfa\x43\x6b\x71\x4d\xea\x69\x89\xff\x62\xb7\xae\x30\xce\x6d\x26\x63\xec\x1a\xd9\xfb\x0e\x1e\xdb\xe6\xfe\x90\x13\x4f\xa9\xa4\xfe\xef\x87\xff\x7a\x5f\x01\x00\x00\xff\xff\xa2\x02\x29\xc9\x33\x01\x00\x00")

func specSpecTmplBytes() ([]byte, error) {
	return bindataRead(
		_specSpecTmpl,
		"spec/spec.tmpl",
	)
}

func specSpecTmpl() (*asset, error) {
	bytes, err := specSpecTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/spec.tmpl", size: 307, mode: os.FileMode(420), modTime: time.Unix(1611719528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"spec/definition.tmpl": specDefinitionTmpl,
	"spec/path.tmpl":       specPathTmpl,
	"spec/spec.tmpl":       specSpecTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"spec": &bintree{nil, map[string]*bintree{
		"definition.tmpl": &bintree{specDefinitionTmpl, map[string]*bintree{}},
		"path.tmpl":       &bintree{specPathTmpl, map[string]*bintree{}},
		"spec.tmpl":       &bintree{specSpecTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
