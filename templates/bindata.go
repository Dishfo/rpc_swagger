// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// spec/definition.tmpl
// spec/path.tmpl
// spec/spec.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _specDefinitionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4f\x8f\x9b\x30\x10\xc5\xef\x7c\x8a\x11\xad\xb4\xed\x01\xb6\x67\xae\xad\xaa\xee\x81\x0a\x35\xed\x39\x9a\xc0\x23\x75\x65\x1b\xd7\x98\x36\x11\xe2\xbb\x57\x40\xfe\x38\x90\x90\x54\xeb\x0b\x96\x67\xfc\x9b\x37\xc3\x73\xdb\x46\x54\xa0\x14\x1a\x14\x0e\x5f\xe1\x44\xa5\xd7\xa5\x80\x2c\xd6\x6e\x6f\x10\x52\xd4\x75\x01\x0d\xab\x4f\x16\x25\xc5\x2f\x75\x66\x85\x12\x4e\xfc\x01\x9d\x82\x7d\x38\xce\x2c\x4a\xb1\x5b\x19\xce\xd1\x75\xfd\xf5\xa4\x3f\x5d\xfd\xe5\xed\x16\xf6\xfb\xde\xe0\x82\x05\x59\xe3\x00\xfc\x86\x12\x16\x3a\x5f\x04\xbe\xb5\x28\x13\x7a\x7a\xf3\x7c\x56\x5a\x3f\x4f\xf9\x4f\xd7\x0b\xa4\x6c\xee\x6b\xad\x36\xbf\x90\xbb\x9b\x49\x5c\x14\x43\x51\x96\x99\xad\x0c\xac\x13\xa8\x13\xbf\x9c\x2e\xae\xcc\x2a\x65\x73\x51\x38\x22\x07\x65\x24\xbb\xdb\x23\x8f\x5f\x1c\xd4\xca\x20\x9f\x0c\xff\xd8\x0f\x7e\x93\xdf\x34\x85\x6c\x2d\xef\xc3\x85\xfe\x84\x83\x3a\x69\x7d\xb5\x0c\x5d\xd0\xac\xd1\x2f\x5c\x7f\xae\xac\x62\xb7\x34\xe6\x72\xc8\x18\x4c\x31\x26\x4f\xb9\x33\x6c\x56\x09\xed\x60\x97\xa0\xbb\x48\x37\x52\xf2\x46\x22\x21\x67\x1b\xdc\x21\x7e\x6c\x6a\x57\xa9\x94\x6d\xfd\x93\xe5\x32\x57\x8d\x49\xff\x81\xfd\xa1\x1f\x02\x37\x7a\x19\xed\x4d\x39\x08\x82\xb6\x9d\x3f\xd1\xb0\x8f\x79\xef\x20\x19\xee\x58\xd6\x5b\x50\xfc\xe9\x7c\x3e\xea\x68\x5b\x8a\xd3\xaa\x80\xfc\xca\x0a\x5d\x37\x1a\xe1\xa0\x5c\x83\xde\x49\x68\x8a\xcf\xa6\x7e\x4f\x1f\x8e\xfa\xcd\xc4\xe9\x57\xff\xff\x58\xd6\x27\x78\xe1\xd8\xaf\xf9\xb8\xf7\xe6\x9e\x1b\xe6\x72\xd8\x78\xbb\xc5\xf5\x2f\x00\x00\xff\xff\x00\x83\x06\x6b\xe0\x04\x00\x00")

func specDefinitionTmplBytes() ([]byte, error) {
	return bindataRead(
		_specDefinitionTmpl,
		"spec/definition.tmpl",
	)
}

func specDefinitionTmpl() (*asset, error) {
	bytes, err := specDefinitionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/definition.tmpl", size: 1248, mode: os.FileMode(436), modTime: time.Unix(1611670013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specPathTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xcd\x8e\xda\x30\x10\xbe\xf3\x14\x16\xad\xc4\x09\x58\xf5\x98\x07\xa8\x8a\x54\xaa\x08\x7a\x5f\x0d\xf6\x17\xf0\x2a\xfe\xd9\xb1\xb3\x5d\x14\xe5\xdd\x2b\x9b\xa5\x4d\x96\xd0\x54\x5a\x2e\x24\x93\xc9\x37\xf3\xfd\x38\x6d\xbb\x14\x0a\x95\xb6\x10\x73\x4f\xf1\xf4\xc8\x08\x4d\x1d\x1f\xe3\xd9\x63\x2e\x96\x5d\x37\x13\x7f\x7e\xa9\x57\x57\x62\xb5\x09\x25\x6b\xa3\xa3\x7e\x81\x18\x34\xa4\x96\x55\xc9\xa8\xf4\xeb\xde\x93\x44\xd7\x25\x98\x22\x55\xf7\xbf\xe8\x78\x04\xff\x3c\x7b\xdc\x60\xa2\x0e\x78\x03\xde\xa1\x02\xc3\xca\x49\xe0\xcf\x8c\xaa\x10\x8b\x4f\xeb\xbc\xbc\x8e\xda\xd9\xb0\x7e\x3f\x67\x71\x7f\xd0\x96\xfc\xff\xed\xee\x0e\x4f\x90\xf1\x9f\x8d\xa4\x54\x5e\x80\xea\x92\x9d\x07\x47\x8d\x50\xbc\x1f\x6d\xd5\x1d\x2d\xb7\xe4\x6f\x16\x59\x8a\x08\xe3\x6b\x8a\xa3\xae\xac\x36\x11\x66\xef\x21\x47\xfc\xb9\x52\xc4\xb3\xe8\x6b\x21\xe6\xc4\x4c\xe7\xf9\x04\x65\x1d\x61\x06\xab\x7f\x74\x1b\xab\xc4\x28\xed\x6f\x14\xbe\x3a\x36\x14\xa7\x4c\xa8\x72\x57\x8e\xd0\xe5\x85\xb1\x19\xa3\x23\x4a\xa7\x6d\x04\x4f\x0d\x78\x5d\xda\xa6\xae\xe9\x50\xa3\x10\x91\x1b\x8c\xa2\xf7\xb8\xcc\xda\x76\x70\x60\xe6\xa9\x98\x2e\x42\x91\xdb\x98\xec\x11\x62\x55\xa6\x4a\x1e\xbd\x66\x2f\x53\x32\x77\x5e\xa6\x62\xd7\x5d\xf4\xf5\x2e\xc4\xab\xd2\xd2\xd9\xd0\x98\x7e\x68\x96\x82\xbc\xaf\xb5\xa4\x94\xab\xf5\x53\x70\xf6\xed\x51\xca\x57\x2e\x6e\x54\x16\x65\xe7\xe5\x1e\xfc\xa2\x25\xb6\x88\x27\xf7\x57\x0a\x4f\x4c\x06\x11\x3c\x40\xd5\xb6\x10\x07\xa7\xce\x3d\x96\x96\x0c\x0a\x51\xa6\xf6\xef\x3a\xf4\x93\xce\x78\x6e\x34\x43\xdd\x08\x13\xe4\x09\x86\x86\x39\xb9\x77\x20\x33\x70\x8a\xc7\x6a\xeb\x14\xea\x1f\x64\x7a\x07\x93\x11\xbc\xb3\xa1\xcf\x7c\xf1\xe5\xe1\x61\xd1\x87\x56\x08\x92\xb5\x4f\x80\x85\x08\x8d\x94\x08\x61\x3c\x51\x3b\x84\xa1\xdb\x63\x7b\x4e\xc6\x79\x97\xef\x92\x14\xb7\xd1\xbd\x66\xe0\x52\x89\x74\x1c\x88\x9b\x3e\x3f\x17\x2f\x2e\x2c\xaf\x4e\xb0\x53\x8d\x9c\x70\x77\xd6\xb6\xd7\xa8\xe5\xff\xdf\x01\x00\x00\xff\xff\x54\xda\x77\x62\x98\x05\x00\x00")

func specPathTmplBytes() ([]byte, error) {
	return bindataRead(
		_specPathTmpl,
		"spec/path.tmpl",
	)
}

func specPathTmpl() (*asset, error) {
	bytes, err := specPathTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/path.tmpl", size: 1432, mode: os.FileMode(436), modTime: time.Unix(1611589980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specSpecTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\xbd\x4a\x44\x31\x10\x85\xfb\x3c\xc5\x61\x9b\xad\x8c\xab\x76\xe9\x44\x2c\xd6\x42\x44\x9f\x60\xc8\xce\x5d\x23\x37\x3f\xcc\xcc\x5d\x8b\xcb\x7d\x77\x49\x04\x41\xc1\x54\x87\xf3\x9d\x7c\xa3\x9f\x74\x3e\xb3\x04\xec\x6f\xfd\x61\xef\x52\x99\x6a\x70\x80\x25\x9b\x39\xe0\x49\x6b\xc1\x6b\x8b\x38\x96\x49\x48\x4d\x96\x68\x8b\x30\xee\x5f\x8e\x0e\x38\xb1\x46\x49\xcd\x52\x2d\x01\xd2\x22\x94\xe5\xc2\x82\x75\xf5\x6f\x23\x3d\x53\xe6\x6d\x73\x40\xac\xc5\x28\x5a\x37\x03\x85\x32\x87\x3e\x7a\xf8\x6e\xc7\x02\xe0\x4c\x69\x1e\xfd\x63\x4f\xa3\xbd\xb0\xe8\xb0\xdf\xf8\x3b\x7f\x70\xb1\x16\x5d\x32\x6b\xf7\x5c\x81\x5a\x9b\x53\xa4\x7e\xfe\xfa\x43\x6b\x71\x4d\xea\x69\x89\xff\x62\xb7\xae\x30\xce\x6d\x26\x63\xec\x1a\xd9\xfb\x0e\x1e\xdb\xe6\xfe\x90\x13\x4f\xa9\xa4\xfe\xef\x87\xff\x7a\x5f\x01\x00\x00\xff\xff\xa2\x02\x29\xc9\x33\x01\x00\x00")

func specSpecTmplBytes() ([]byte, error) {
	return bindataRead(
		_specSpecTmpl,
		"spec/spec.tmpl",
	)
}

func specSpecTmpl() (*asset, error) {
	bytes, err := specSpecTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spec/spec.tmpl", size: 307, mode: os.FileMode(436), modTime: time.Unix(1611676847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"spec/definition.tmpl": specDefinitionTmpl,
	"spec/path.tmpl":       specPathTmpl,
	"spec/spec.tmpl":       specSpecTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"spec": &bintree{nil, map[string]*bintree{
		"definition.tmpl": &bintree{specDefinitionTmpl, map[string]*bintree{}},
		"path.tmpl":       &bintree{specPathTmpl, map[string]*bintree{}},
		"spec.tmpl":       &bintree{specSpecTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
